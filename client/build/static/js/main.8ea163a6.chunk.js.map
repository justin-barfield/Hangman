{"version":3,"sources":["pictures.js","components/Title/index.js","components/Attempts/index.js","components/GamesWon/index.js","components/GamesLost/index.js","components/Hangman/index.js","components/Letters/index.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","id","image","Title","Attempts","props","className","badAttempts","GamesWon","wins","GamesLost","losses","Hangman","src","pictures","alt","Letters","mapAll","word","map","value","index","key","found","val","axios","get","App","state","apiWord","wordLength","count","goodAttempts","allAttempts","letterIndex","numberOfBadAttempts","remainingAttempts","repeat","pageLock","previousWords","wordNikApi","API","then","response","fullWord","data","wordArray","split","length","wordObj","setState","invalidKey","catch","error","console","log","resetGame","a","win","loss","handleKeyDown","event","match","correct","counter","test","push","concat","setTimeout","this","document","addEventListener","role","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8ea163a6.chunk.js","sourcesContent":["let pictures = [\r\n    {\r\n        id: 1,\r\n        image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/1280px-React-icon.svg.png\"\r\n    },\r\n];\r\n\r\nmodule.exports = pictures;","import React from 'react';\r\n\r\nfunction Title() {\r\n    return (\r\n        <h1>Hangman</h1>\r\n    )\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\n\r\nfunction Attempts(props) {\r\n    return (\r\n        <div className=\"row scores\">\r\n            <h3>\r\n                Letters used: {props.badAttempts}\r\n            </h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Attempts;","import React from 'react';\r\n\r\nfunction GamesWon(props) {\r\n    return (\r\n        <div className=\"row scores\">\r\n            <h3>\r\n                Games Won: {props.wins}\r\n            </h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GamesWon;","import React from 'react';\r\n\r\nfunction GamesLost(props) {\r\n\r\n    return (\r\n        <div className=\"row scores\">\r\n            <h3>\r\n                Games Lost: {props.losses}\r\n            </h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GamesLost;","import React from 'react';\r\n\r\nfunction Hangman(props) {\r\n    return (\r\n\r\n        <div className=\"row pic-div \">\r\n            \r\n            <img src={props.pictures[0].image} id=\"hangman\" className=\"\" alt=\"placeholder\"/>\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Hangman;","import React from 'react';\r\n\r\nfunction Letters(props) {\r\n    \r\n    const mapAll = props.word.map((value, index) =>\r\n    \r\n        <div \r\n            className=\"card bg-primary letter-card\"\r\n            key={value.id}\r\n        >\r\n            <div className=\"card-body\">\r\n                <h5\r\n                    id={index} \r\n                    className=\"card-title\"\r\n                >\r\n                    {props.word[index].found ? (\r\n                        <>{props.word[index].val}</>\r\n                    ) : (<>_</>)}\r\n                </h5>\r\n            </div>\r\n        </div>\r\n    \r\n    );\r\n    \r\n    return (\r\n\r\n        <div className=\"row\">\r\n            \r\n            <div className=\"card-group\">\r\n\r\n                {mapAll}\r\n            \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Letters;","import axios from 'axios';\r\n\r\nexport default {\r\n\r\n    // Get a new word\r\n    getWord: function() {\r\n        return axios.get(\"/getWord\");\r\n    }\r\n\r\n};","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Title from './components/Title';\nimport Attempts from './components/Attempts';\nimport GamesWon from './components/GamesWon';\nimport GamesLost from './components/GamesLost';\nimport Hangman from './components/Hangman';\nimport Letters from './components/Letters';\nimport pictures from './pictures';\nimport API from \"./utils/API\";\n\nclass App extends Component {\n\n    state={\n        apiWord: \"\",\n        word: [],\n        wordLength: 0,\n        count: 0,\n        goodAttempts: [],\n        badAttempts:[],\n        allAttempts: [],\n        letterIndex: [],\n        numberOfBadAttempts: 0,\n        remainingAttempts: 8,\n        repeat: false,\n        wins: 0,\n        losses: 0,\n        pictures,\n        pageLock: false,\n        previousWords: [],\n    }\n\n    wordNikApi = () => {\n\n        API.getWord()\n            .then( response => {\n\n                let previousWords = [...this.state.previousWords];\n                let fullWord = response.data;\n                let wordArray = fullWord.split(\"\");\n                let wordLength = wordArray.length;\n    \n                // Send wordObj to state with value and index\n                let wordObj = wordArray.map((value, index) => {\n                    return {\n                        found: false,\n                        val: value,\n                        id: index,\n                    }\n                });\n    \n                this.setState({ \n                    apiWord: fullWord,\n                    word: wordObj,\n                    wordLength: wordLength,\n                    remainingAttempts: 8,\n                    count: 0,\n                    goodAttempts: [],\n                    badAttempts:[],\n                    allAttempts: [],\n                    letterIndex: [],\n                    numberOfBadAttempts: 0,\n                    repeat: false,\n                    pageLock: false,\n                    invalidKey: false,\n                    previousWords: previousWords\n                });\n            })\n            .catch( ( error ) => {\n                console.log(\"API ERROR: \", error);\n            });\n\n    };\n    // Clear word state for new incoming word\n    resetGame = async() => {\n\n        await this.wordNikApi();\n\n    };\n\n    // Win count bool\n    win = () =>{\n        if( this.state.wordLength === this.state.count ) {\n            return true\n        }\n    };\n\n    // Attempt count bool\n    loss = () => {\n        if( this.state.numberOfBadAttempts === 8 ) {\n            return true\n        }\n    };\n\n    // Record key press\n    handleKeyDown = (event) => {\n        let match = [...this.state.word];\n        let repeat = false;\n        let correct = false;\n        let letterIndex= [];\n        let counter = this.state.count;\n        let remainingAttempts = this.state.remainingAttempts;\n        const regex = /^[A-Za-z]$/;\n\n        // validate key press is alphabetic\n        if( regex.test(event.key) ) {\n        \n            // Validate if the key pressed is recurring in allAttempts\n            this.state.allAttempts.map((value, index) => {\n\n                if( this.state.allAttempts[index] === event.key ) {\n                    return repeat = true;\n                };\n\n            });\n\n            /* TODO: Unexpected error here. Attempting to have good and bad attempts separately checked causes repeat to never return true. Would like to have the correct letters not display in letters used. To be investigated later. Bypassing error by placing all key strokes into allAttempts state. */\n\n            // Validate if key pressed matches the word\n            this.state.word.map((value, index) => {\n\n                if( this.state.word[index].val === event.key ) {\n\n                    match[index] = {...match[index], found: true};          \n                    letterIndex.push(index);\n                    counter++;\n                    correct = true;\n\n                };\n                \n            });\n\n            // if page is not locked\n            if ( !this.state.pageLock ){\n\n                // if repeat = false \n                if( !repeat ) {\n\n                    // If correct letter guessed\n                    if( correct ) {\n\n                        this.setState({\n                            goodAttempts: this.state.goodAttempts.concat(event.key),\n                            allAttempts: this.state.allAttempts.concat(event.key),\n                            word: match,\n                            repeat: false,\n                            letterIndex: this.state.letterIndex.concat(letterIndex),\n                            count: counter,\n                            invalidKey: false,\n                        }, () => {\n\n                            // Update gamesWon\n                            if( this.win() ) {\n\n                                let previousWords = [...this.state.previousWords];\n                                previousWords.push(this.state.apiWord);\n            \n                                this.setState({\n                                    previousWords: previousWords,\n                                    pageLock: true,\n                                    wins: this.state.wins +1,\n                                }, () => {\n                                    setTimeout(() => {\n                                        this.resetGame();\n                                        // this.setWord();\n                                    }, 5000);\n                                });\n            \n                            };\n                        });\n\n                    // If incorrect letter guessed\n                    } else if( !correct ) {\n\n                        this.setState({\n                            badAttempts: this.state.badAttempts.concat(event.key),\n                            allAttempts: this.state.allAttempts.concat(event.key),\n                            repeat: false,\n                            numberOfBadAttempts: this.state.numberOfBadAttempts + 1,\n                            remainingAttempts: remainingAttempts -1,\n                            invalidKey: false,\n                        }, () => {\n\n                            // Update gamesLost\n                            if( this.loss() ) {\n\n                                let previousWords = [...this.state.previousWords];\n                                previousWords.push(this.state.apiWord);\n                                \n                                this.setState({\n                                    previousWords: this.state.apiWord,\n                                    pageLock: true,\n                                    losses: this.state.losses + 1,\n                                }, () => {\n                                    setTimeout(() => {\n                                        this.resetGame();\n                                        // this.setWord();\n                                    }, 5000);\n                                });\n            \n                            }\n                        });\n\n                    } else {\n\n                        console.log(\"Key event not accounted for...\")\n                    };\n\n                // If repeat = true\n                } else {\n\n                    this.setState({\n                        repeat: true,\n                    });\n\n                };\n            } else {\n\n                return;\n\n            };\n\n        } else {\n\n            this.setState({\n                invalidKey:true,\n            });\n\n        };\n    };\n\n    componentDidMount() {\n        this.resetGame();\n        if( this.state.pageLock ) {\n            return\n        } else {\n            document.addEventListener(\"keydown\", this.handleKeyDown);\n        }\n    };\n\n    render(){\n        return (\n\n        <>\n\n            <div className=\"container-fluid\" id=\"page-container\">\n\n                <div className=\"row\" id=\"title\">\n\n                    <div className=\"col\">\n\n                        <Title/>\n\n                    </div>\n                    \n                </div>\n\n                <div className=\"row\">\n\n                    <div id=\"scores-col\" className=\"col-3\">\n\n                        <Attempts\n                            badAttempts={this.state.badAttempts}\n                        />\n\n                        <GamesWon\n                            wins={this.state.wins}\n                        />\n\n                        <GamesLost\n                            losses={this.state.losses}\n                        />\n\n                        <div className=\"row scores\">\n                            <h3>\n                                Attempts remaining: {this.state.remainingAttempts}\n                            </h3>\n                        </div>\n\n                    \n                    </div>\n\n                    <div className=\"col-6\">\n\n                        <div className=\"row\">\n\n                            <div className=\"col d-flex justify-content-center\">\n\n                                <Hangman\n                                    pictures={pictures}\n                                />\n\n                            </div>\n\n\n                        </div>\n\n                    </div>\n\n                    <div className=\"col-3\">\n                        <h3>Previous words:</h3>\n                        <br></br>\n                        <h4>{this.state.previousWords}</h4>\n                    </div>\n\n                </div>\n                    \n                <div className=\"row w-auto\">\n\n                    <div className=\"col d-flex justify-content-center\">\n\n                        {this.state.repeat ? (\n                            <div className=\"alert alert-danger d-flex justify-content-center\" role=\"alert\">\n                                Repeat character used!\n                            </div>\n                        ):(<></>)}\n\n                        {this.state.invalidKey ? (\n                            <div className=\"alert alert-warning d-flex justify-content-center\" role=\"alert\">\n                                Invalid key pressed!\n                            </div>\n                        ):(<></>)}\n\n                    </div>\n\n                </div>\n\n                <div className=\"row  w-auto\" id=\"word-row\">\n\n                    <div className=\"col d-flex justify-content-center\">\n\n                        <Letters \n                            word={this.state.word}\n                            correct={this.state.correct}\n                        />\n\n                    </div>\n\n                </div>\n\n            </div>\n\n        </>\n\n        )\n    }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}